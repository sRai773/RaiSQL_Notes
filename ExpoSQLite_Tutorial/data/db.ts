import { type SQLiteDatabase } from 'expo-sqlite';

// NOTE - this file is a .ts instead of a .tsx because it ONLY has
// typescript within it. The other files also have RN components (like <View>), 
// which is why they are named .tsx files. 

/**
 * Item Interface
 * 
 * Defines the TypeScript type for a row in the `items` table.
 * This ensures type safety when working with database records.
 * 
 * @property id - Unique identifier (auto-generated by SQLite)
 * @property name - Name of the item (text)
 * @property quantity - Number of items (integer)
 */
export interface Item {
  id: number;
  name: string;
  quantity: number;
}

/**
 * Initialize Database
 * 
 * Creates the `items` table if it doesn't already exist.
 * This function is called automatically when the app starts (see _layout.tsx).
 * 
 * Table Schema:
 * - id: INTEGER PRIMARY KEY - Auto-incrementing unique identifier
 * - name: TEXT NOT NULL - Item name (required)
 * - quantity: INTEGER NOT NULL - Item quantity (required)
 * 
 * Note: "IF NOT EXISTS" prevents errors if the table is already created.
 * 
 * @param db - The SQLite database instance
 * @returns Promise that resolves when the table initialization completes
 */
export const initDb = async (db: SQLiteDatabase): Promise<void> => {
  await db.execAsync(
    "CREATE TABLE IF NOT EXISTS items (id INTEGER PRIMARY KEY NOT NULL, name TEXT NOT NULL, quantity INTEGER NOT NULL);"
  );
};

/**
 * Insert Item
 * 
 * Adds a new item to the database.
 * 
 * Important: Uses parameterized queries (? placeholders) for security.
 * This prevents SQL injection attacks by treating user input as data, not code.
 * The values in the array [name, quantity] replace the ? placeholders in order.
 * 
 * Example: If name="Apple" and quantity=5, the query becomes:
 * INSERT INTO items (name, quantity) VALUES ('Apple', 5);
 * 
 * @param db - The SQLite database instance
 * @param name - The name of the item to insert
 * @param quantity - The quantity of the item to insert
 * @returns Promise that resolves when the insert operation completes
 */
export const insertItem = async (
  db: SQLiteDatabase,
  name: string,
  quantity: number
): Promise<void> => {
  await db.runAsync("INSERT INTO items (name, quantity) VALUES (?, ?);", [name, quantity]);
};

/**
 * Fetch All Items
 * 
 * Retrieves all items from the database as an array.
 * 
 * The <Item> type tells TypeScript what shape the returned data has,
 * providing autocomplete and type checking when you use the results.
 * 
 * @param db - The SQLite database instance
 * @returns Promise that resolves to an array of Item objects
 */
export const fetchItems = async (db: SQLiteDatabase): Promise<Item[]> => {
  return db.getAllAsync<Item>("SELECT * FROM items;");
};


/**
 * Update Item
 * 
 * Modifies an existing item in the database.
 * 
 * Important: Uses parameterized queries (? placeholders) for security.
 * This ensures that user input (name, quantity, id) is treated as data, not code,
 * preventing SQL injection vulnerabilities.
 * 
 * Example: If id=3, name="Oranges", and quantity=10, the query becomes:
 * UPDATE items SET name='Oranges', quantity=10 WHERE id=3;
 * 
 * @param db - The SQLite database instance
 * @param id - The unique identifier of the item to update
 * @param name - The updated name for the item
 * @param quantity - The updated quantity for the item
 * @returns Promise that resolves when the update operation completes
 */
export const updateItem = async (
  db: SQLiteDatabase,
  id: number,
  name: string,
  quantity: number
): Promise<void> => {
  await db.runAsync("UPDATE items SET name = ?, quantity = ? WHERE id = ?;", [name, quantity, id]);
};

/**
 * Delete Item
 * 
 * Removes an item from the database based on its unique identifier.
 * 
 * Important: Uses a parameterized query to securely identify which row to delete.
 * Only the item with the matching `id` will be removed from the table.
 * 
 * Example: If id=5, the query becomes:
 * DELETE FROM items WHERE id=5;
 * 
 * @param db - The SQLite database instance
 * @param id - The unique identifier of the item to delete
 * @returns Promise that resolves when the delete operation completes
 */
export const deleteItem = async (db: SQLiteDatabase, id: number): Promise<void> => {
  await db.runAsync("DELETE FROM items WHERE id = ?;", [id]);
};

